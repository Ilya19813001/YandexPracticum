
В самостоятельном проекте мы будете работать с базой данных StackOverflow — сервиса вопросов и ответов о программировании. 
StackOverflow похож на социальную сеть — пользователи сервиса задают вопросы, отвечают на посты, оставляют комментарии и ставят оценки другим ответам.

Теперь познакомьтесь с данными таблиц.
Таблица stackoverflow.badges
Хранит информацию о значках, которые присуждаются за разные достижения. Например, пользователь, правильно ответивший на большое количество вопросов про PostgreSQL, может получить значок postgresql. 
Поле	Описание
id	Идентификатор значка, первичный ключ таблицы
name	Название значка
user_id	Идентификатор пользователя, которому присвоили значок, внешний ключ, отсылающий к таблице users
creation_date	Дата присвоения значка
Таблица stackoverflow.post_types
Содержит информацию о типе постов. Их может быть два:
Question — пост с вопросом;
Answer — пост с ответом.
Поле	Описание
id	Идентификатор поста, первичный ключ таблицы
type	Тип поста
Таблица stackoverflow.posts
Содержит информацию о постах.
Поле	Описание
id	Идентификатор поста, первичный ключ таблицы
title	Заголовок поста
creation_date	Дата создания поста
favorites_count	Число, которое показывает, сколько раз пост добавили в «Закладки»
last_activity_date	Дата последнего действия в посте, например комментария
last_edit_date	Дата последнего изменения поста
user_id	Идентификатор пользователя, который создал пост, внешний ключ к таблице users
parent_id	Если пост написали в ответ на другую публикацию, в это поле попадёт идентификатор поста с вопросом
post_type_id	Идентификатор типа поста, внешний ключ к таблице post_types
score	Количество очков, которое набрал пост
views_count	Количество просмотров
Таблица stackoverflow.users
Содержит информацию о пользователях.
Поле	Описание
id	Идентификатор пользователя, первичный ключ таблицы
creation_date	Дата регистрации пользователя
display_name	Имя пользователя
last_access_date	Дата последнего входа
location	Местоположение
reputation	Очки репутации, которые получают за хорошие вопросы и полезные ответы
views	Число просмотров профиля пользователя
Таблица stackoverflow.vote_types
Содержит информацию о типах голосов. Голос — это метка, которую пользователи ставят посту. Типов бывает несколько: 
UpMod — такую отметку получают посты с вопросами или ответами, которые пользователи посчитали уместными и полезными.
DownMod — такую отметку получают посты, которые показались пользователям наименее полезными.
Close — такую метку ставят опытные пользователи сервиса, если заданный вопрос нужно доработать или он вообще не подходит для платформы.
Offensive — такую метку могут поставить, если пользователь ответил на вопрос в грубой и оскорбительной манере, например, указав на неопытность автора поста.
Spam — такую метку ставят в случае, если пост пользователя выглядит откровенной рекламой.
Поле	Описание
id	Идентификатор типа голоса, первичный ключ
name	Название метки
Таблица stackoverflow.votes
Содержит информацию о голосах за посты. 
Поле	Описание
id	Идентификатор голоса, первичный ключ
post_id	Идентификатор поста, внешний ключ к таблице posts
user_id	Идентификатор пользователя, который поставил посту голос, внешний ключ к таблице users
bounty_amount	Сумма вознаграждения, которое назначают, чтобы привлечь внимание к посту
vote_type_id	Идентификатор типа голоса, внешний ключ к таблице vote_types
creation_date	Дата назначения голоса

Задание 1


Найдите количество вопросов, которые набрали больше 300 очков или как минимум 100 раз были добавлены в «Закладки».

SELECT COUNT(p.id)
FROM stackoverflow.posts AS p
JOIN stackoverflow.post_types AS pt ON  p.post_type_id = pt.id
WHERE pt.type = 'Question' 
AND p.score > 300 
OR favorites_count >= 100;

Задание 2

Сколько в среднем в день задавали вопросов с 1 по 18 ноября 2008 включительно? Результат округлите до целого числа.

SELECT ROUND(AVG(cd.day_18))
FROM
(SELECT COUNT(p.id) AS day_18
FROM stackoverflow.posts AS p
JOIN stackoverflow.post_types AS pt ON  p.post_type_id = pt.id
WHERE pt.type = 'Question'
      AND CAST(DATE_TRUNC('day', creation_date) AS date) BETWEEN '2008-11-01' AND '2008-11-18'
GROUP BY CAST(DATE_TRUNC('day', creation_date) AS date)
 ) AS cd
 
 Задание 3
 
 Сколько пользователей получили значки сразу в день регистрации? Выведите количество уникальных пользователей.
 
 SELECT 
       COUNT(DISTINCT b.user_id)
FROM stackoverflow.badges AS b
JOIN stackoverflow.users AS u ON b.user_id = u.id
WHERE b.creation_date::date = u.creation_date::date;

Задание 4

Сколько уникальных постов пользователя с именем Joel Coehoorn получили хотя бы один голос?

SELECT COUNT(DISTINCT p.id)
FROM stackoverflow.posts AS p
JOIN stackoverflow.users AS u ON u.id = p.user_id
JOIN stackoverflow.votes As v ON p.id = v.user_id
WHERE u.display_name = 'Joel Coehoorn'
      AND v.id >= 1;

Задание 5

Выгрузите все поля таблицы vote_types. Добавьте к таблице поле rank, в которое войдут номера записей в обратном порядке. Таблица должна быть отсортирована по полю id.

SELECT *
FROM 
(SELECT *,
       ROW_NUMBER() OVER (ORDER BY id DESC ) AS rank
FROM stackoverflow.vote_types
 ) new_table
 ORDER BY rank DESC;
 
 Задание 6
 
 Отберите 10 пользователей, которые поставили больше всего голосов типа Close. Отобразите таблицу из двух полей: идентификатором пользователя и количеством голосов. 
 Отсортируйте данные сначала по убыванию количества голосов, потом по убыванию значения идентификатора пользователя.
 
 SELECT u.id AS user,
      COUNT(vt.name) AS votes_cnt
FROM stackoverflow.users AS u
JOIN stackoverflow.votes AS v ON u.id = v.user_id
JOIN stackoverflow.vote_types AS vt ON v.vote_type_id = vt.id
WHERE vt.name = 'Close'
GROUP BY u.id
ORDER BY votes_cnt DESC, user DESC
LIMIT 10

Задание 7


Отберите 10 пользователей по количеству значков, полученных в период с 15 ноября по 15 декабря 2008 года включительно.
Отобразите несколько полей:
идентификатор пользователя;
число значков;
место в рейтинге — чем больше значков, тем выше рейтинг.
Пользователям, которые набрали одинаковое количество значков, присвойте одно и то же место в рейтинге.
Отсортируйте записи по количеству значков по убыванию, а затем по возрастанию значения идентификатора пользователя.

SELECT user_id,
       COUNT(id),
       DENSE_RANK() OVER (ORDER BY COUNT(id) DESC)
FROM stackoverflow.badges
where creation_date::date between '2008-11-15' and '2008-12-15'
GROUP BY user_id
ORDER BY COUNT(id) DESC, user_id
limit 10;

Задание 8

Сколько в среднем очков получает пост каждого пользователя?
Сформируйте таблицу из следующих полей:
заголовок поста;
идентификатор пользователя;
число очков поста;
среднее число очков пользователя за пост, округлённое до целого числа.
Не учитывайте посты без заголовка, а также те, что набрали ноль очков.

SELECT title,
       user_id,
       score,
       ROUND(AVG(score) OVER(PARTITION BY user_id ORDER BY user_id)) AS avg_scr
FROM stackoverflow.posts
WHERE title != '' AND score != 0

Задание 9


Отобразите заголовки постов, которые были написаны пользователями, получившими более 1000 значков. Посты без заголовков не должны попасть в список.

SELECT main_zapros.title_1000
FROM
(SELECT p.title AS title_1000,
       COUNT(*)
FROM stackoverflow.posts AS p
JOIN stackoverflow.badges AS b ON p.user_id = b.user_id
WHERE p.title IS NOT NULL
GROUP BY p.title
HAVING COUNT(*)>1000) AS main_zapros

Задание 10

Напишите запрос, который выгрузит данные о пользователях из США (англ. United States). Разделите пользователей на три группы в зависимости от количества просмотров их профилей:
пользователям с числом просмотров больше либо равным 350 присвойте группу 1;
пользователям с числом просмотров меньше 350, но больше либо равно 100 — группу 2;
пользователям с числом просмотров меньше 100 — группу 3.
Отобразите в итоговой таблице идентификатор пользователя, количество просмотров профиля и группу. Пользователи с нулевым количеством просмотров не должны войти в итоговую таблицу.

SELECT id,
       views,      
       CASE
           WHEN views >= 350 THEN 1
           WHEN views < 350 AND views >= 100 THEN 2
           WHEN views < 100 THEN 3
       END
FROM stackoverflow.users
WHERE location LIKE '%United States%' 
      AND views != 0;
      
Задание 11

Дополните предыдущий запрос. Отобразите лидеров каждой группы — пользователей, которые набрали максимальное число просмотров в своей группе. Выведите поля с идентификатором пользователя, группой и количеством просмотров.
Отсортируйте таблицу по убыванию просмотров, а затем по возрастанию значения идентификатора.

SELECT id,
group_number,
views
FROM (SELECT *,
MAX(views) OVER (PARTITION BY group_number) AS max_value
FROM
    (SELECT id,
       views,      
       CASE
           WHEN views >= 350 THEN 1
           WHEN views < 350 AND views >= 100 THEN 2
           WHEN views < 100 THEN 3
       END AS group_number
FROM stackoverflow.users
WHERE location LIKE '%United States%' 

Задание 12

Посчитайте ежедневный прирост новых пользователей в ноябре 2008 года. Сформируйте таблицу с полями:
номер дня;
число пользователей, зарегистрированных в этот день;
сумму пользователей с накоплением.

WITH november AS
(SELECT  EXTRACT(DAY FROM creation_date) AS day,
        COUNT(display_name) AS day_cnt      
FROM stackoverflow.users 
WHERE EXTRACT(MONTH FROM creation_date) = 11 AND EXTRACT(YEAR FROM creation_date) = 2008
GROUP BY day)
SELECT *,
        SUM(day_cnt) OVER (ORDER BY day) AS user_cnt
FROM november; 

Задание 13

Для каждого пользователя, который написал хотя бы один пост, найдите интервал между регистрацией и временем создания первого поста. Отобразите:
идентификатор пользователя;
разницу во времени между регистрацией и первым постом.

SELECT DISTINCT p.user_id,
       MIN(p.creation_date) OVER (PARTITION BY p.user_id) - u.creation_date
FROM stackoverflow.posts AS p
JOIN stackoverflow.users AS u ON p.user_id = u.id

Задание 2.1

Выведите общую сумму просмотров постов за каждый месяц 2008 года. Если данных за какой-либо месяц в базе нет, такой месяц можно пропустить.
Результат отсортируйте по убыванию общего количества просмотров.

SELECT DATE_TRUNC('month', creation_date)::date as month,
       sum(views_count) as views
FROM stackoverflow.posts
GROUP BY month
ORDER BY views DESC

Задание 2.2

Выведите имена самых активных пользователей, которые в первый месяц после регистрации (включая день регистрации) дали больше 100 ответов. 
Вопросы, которые задавали пользователи, не учитывайте. Для каждого имени пользователя выведите количество уникальных значений user_id.
Отсортируйте результат по полю с именами в лексикографическом порядке.

SELECT u.display_name,
       COUNT(DISTINCT p.user_id)
FROM stackoverflow.users AS u
JOIN stackoverflow.posts AS p ON u.id = p.user_id
JOIN stackoverflow.post_types AS pt ON pt.id = p.post_type_id
WHERE pt.type = 'Answer'
      AND DATE_TRUNC('day', p.creation_date) <= DATE_TRUNC('day', u.creation_date) + INTERVAL '1 month'
GROUP BY u.display_name
HAVING COUNT(p.user_id) > 100
ORDER BY 1     

Задание 2.3

Выведите количество постов за 2008 год по месяцам. Отберите посты от пользователей, которые зарегистрировались в сентябре 2008 года и сделали хотя бы один пост в декабре того же года. 
Отсортируйте таблицу по значению месяца по убыванию.

WITH i AS 
(
SELECT DATE_TRUNC('month', p.creation_date)::date AS month,
       p.id AS p_id,
       u.id AS user_id,
       DATE_TRUNC('month', u.creation_date)::date AS month_user
FROM stackoverflow.posts p
JOIN stackoverflow.users u ON u.id = p.user_id
WHERE u.id in (

SELECT p.user_id
FROM stackoverflow.posts p
JOIN stackoverflow.users u ON u.id = p.user_id
WHERE EXTRACT(MONTH FROM u.creation_date) = 9

Задание 2.4

Используя данные о постах, выведите несколько полей:
идентификатор пользователя, который написал пост;
дата создания поста;
количество просмотров у текущего поста;
сумму просмотров постов автора с накоплением.
Данные в таблице должны быть отсортированы по возрастанию идентификаторов пользователей, а данные об одном и том же пользователе — по возрастанию даты создания поста.

SELECT p.user_id,
       p.creation_date,
       p.views_count,
       SUM(p.views_count) OVER (PARTITION BY user_id ORDER BY p.creation_date)
FROM stackoverflow.posts AS p
ORDER BY p.user_id

Задание 2.5

Сколько в среднем дней в период с 1 по 7 декабря 2008 года включительно пользователи взаимодействовали с платформой? Для каждого пользователя отберите дни, в которые он или она опубликовали хотя бы один пост.
Нужно получить одно целое число — не забудьте округлить результат.

SELECT ROUND(CAST (COUNT(dt) AS NUMERIC) / COUNT(DISTINCT (user_id))) AVG
FROM (
WITH i AS 
(SELECT CAST(DATE_TRUNC('day', creation_date)AS date) AS dt,
               user_id
        FROM stackoverflow.posts
        WHERE CAST(DATE_TRUNC('day', creation_date)AS date) BETWEEN '2008-12-01' AND '2008-12-07') 
SELECT DISTINCT(dt),
       user_id
FROM i
GROUP BY user_id, dt) AS s

Задание 2.6

На сколько процентов менялось количество постов ежемесячно с 1 сентября по 31 декабря 2008 года? Отобразите таблицу со следующими полями:
номер месяца;
количество постов за месяц;
процент, который показывает, насколько изменилось количество постов в текущем месяце по сравнению с предыдущим.
Если постов стало меньше, значение процента должно быть отрицательным, если больше — положительным. Округлите значение процента до двух знаков после запятой.
Напомним, что при делении одного целого числа на другое в PostgreSQL в результате получится целое число, округлённое до ближайшего целого вниз. Чтобы этого избежать, переведите делимое в тип numeric.

SELECT number_month,
       post_cnt_month,
       --ROUND(100 * (LAG(post_cnt_month) OVER(ORDER BY number_month)
     -- - post_cnt_month)::NUMERIC / post_cnt_month, 2) AS percent
       ROUND((post_cnt_month::NUMERIC/(LAG(post_cnt_month) OVER(ORDER BY number_month))*100-100),2) AS percent_diff
FROM
(SELECT EXTRACT(MONTH FROM p.creation_date) AS number_month,
       COUNT(p.id) post_cnt_month
FROM stackoverflow.posts AS p
WHERE creation_date >= '2008-09-01' AND creation_date < '2009-01-01'
GROUP BY 1)
AS i

Задание 2.7

Выгрузите данные активности пользователя, который опубликовал больше всего постов за всё время. Выведите данные за октябрь 2008 года в таком виде:
номер недели;
дата и время последнего поста, опубликованного на этой неделе.

WITH i AS(
    SELECT EXTRACT(WEEK FROM creation_date) AS week_number,
           creation_date
    FROM stackoverflow.posts
    WHERE DATE_TRUNC('month', creation_date)='2008-10-01' AND user_id in (
        SELECT user_id
        FROM stackoverflow.posts
        GROUP BY user_id
        ORDER BY count(id) DESC
        LIMIT 1) )

SELECT DISTINCT
       week_number,
       LAST_VALUE(creation_date) OVER (PARTITION BY week_number ORDER BY week_number)
FROM i       
ORDER BY week_number;



